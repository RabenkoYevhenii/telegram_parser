#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Telegram —Å–∫—Ä–∞–ø–µ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–∏—Å–∫–æ–º gaming-–∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
"""

import os
import asyncio
import uuid
from pathlib import Path
from telethon import TelegramClient
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import (
    InputPeerEmpty,
    InputChannel,
    InputUser,
)
from telethon.errors.rpcerrorlist import (
    PeerFloodError,
    UserPrivacyRestrictedError,
    FloodWaitError,
)
from telethon.tl.functions.channels import InviteToChannelRequest
import sys
import csv
import re
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv

load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = os.environ.get("API_ID")
API_HASH = os.environ.get("API_HASH")
PHONE = os.environ.get("PHONE")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
if not API_ID or not API_HASH or not PHONE:
    print("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ API_ID, API_HASH –∏ PHONE –≤ .env —Ñ–∞–π–ª–µ")
    sys.exit(1)

GAMING_KEYWORDS = [
    "igaming",
    "casino",
    "bet",
    "betting",
    "poker",
    "slots",
    "gambling",
    "game",
    "games",
    "jackpot",
    "lottery",
    "roulette",
    "payments",
    "payment",
    "crypto",
    "bitcoin",
    "trading",
    "forex",
    "affiliate",
    "–ø–∞—Ä—Ç–Ω–µ—Ä",
    "–∫–∞–∑–∏–Ω–æ",
    "—Å—Ç–∞–≤–∫–∏",
    "–∏–≥—Ä—ã",
    "–∞–∑–∞—Ä—Ç",
    "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞",
    "—Ç—Ä–µ–π–¥–∏–Ω–≥",
    "–ø–∞—Ä—Ç–Ω—ë—Ä–∫–∞",
    "—Ä–µ—Ñ–µ—Ä–∞–ª",
    "–≥–µ–º–±–ª–∏–Ω–≥",
    "–±—É–∫–º–µ–∫–µ—Ä",
    "bookmaker",
    "—Å–ø–æ—Ä—Ç",
    "sport",
    "–ø—Ä–æ–≥–Ω–æ–∑",
    "–ø—Ä–æ–≥–Ω–æ–∑—ã",
    "–∫–∞–ø–µ—Ä",
    "capper",
    "tipster",
    "–±–∏–Ω–∞–Ω—Å",
    "binance",
    "—Å–∏–≥–Ω–∞–ª",
    "spin",
    "spinz",
    "vegas",
    "roll",
    "highroll",
    "betwin",
    "betwinner",
    "melbet",
    "1xbet",
    "1xcasino",
    "cpa",
    "revshare",
    "arbitrage",
    "–∞—Ä–±–∏—Ç—Ä–∞–∂",
    "sportsbook",
    "offers",
    "–æ—Ñ—Ñ–µ—Ä—ã",
    "–æ—Ñ–µ—Ä–∞",
    "manager",
    "–º–µ–Ω–µ–¥–∂–µ—Ä",
    "leads",
    "conversion",
    "deposit",
    "–¥–µ–ø–æ–∑–∏—Ç",
    "bingo",
    "reel",
    "bizdev",
    "business development",
    "partners",
    "–ø–∞—Ä—Ç–Ω—ë—Ä—ã",
    "geo",
    "–≥–µ–æ",
    "traf",
    "—Ç—Ä–∞—Ñ",
]


class FastTelegramScraper:
    def __init__(self):
        self.client = TelegramClient(PHONE, int(API_ID), API_HASH)  # type: ignore
        self._common_groups_cache = None
        self.data_folder = Path("data")

    def ensure_data_folder(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        self.data_folder.mkdir(exist_ok=True)

    def generate_filename(self, prefix: str, group_title: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ —Å UUID"""
        self.ensure_data_folder()
        sanitized_title = re.sub("[^a-z0-9]+", "-", group_title.lower())
        unique_id = str(uuid.uuid4())[:8]  # –ö–æ—Ä–æ—Ç–∫–∏–π UUID
        filename = f"{prefix}-{sanitized_title}-{unique_id}.csv"
        return str(self.data_folder / filename)

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        await self.client.connect()
        if not await self.client.is_user_authorized():
            await self.client.send_code_request(PHONE)  # type: ignore
            code = input("üì± –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
            await self.client.sign_in(PHONE, code)  # type: ignore
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!")

    async def get_user_fast_info(self, user):
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –±–µ–∑ API –∑–∞–ø—Ä–æ—Å–æ–≤"""
        info = {
            "bio": "",
            "gaming_keywords": "",
            "common_groups": "",
        }

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
            if hasattr(user, "__class__"):
                class_name = user.__class__.__name__
                if "Channel" in class_name or "Chat" in class_name:
                    info["bio"] = "CHANNEL"
                    return info

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –±–æ—Ç
            is_bot = getattr(user, "bot", False)
            if is_bot:
                info["bio"] = "BOT"
                return info

            # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—â–∏–µ –≥—Ä—É–ø–ø—ã (–ø–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω —Ä–∞–∑)
            if self._common_groups_cache is None:
                try:
                    dialogs = await self.client.get_dialogs(limit=200)
                    self._common_groups_cache = [
                        d.title for d in dialogs if d.is_group
                    ][:10]
                except Exception:
                    self._common_groups_cache = []

            info["common_groups"] = "; ".join(self._common_groups_cache[:5])

        except Exception:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ –±—ã—Å—Ç—Ä–æ–º —Ä–µ–∂–∏–º–µ
            pass

        return info

    async def get_user_detailed_info(self, user):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å API –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
        info = await self.get_user_fast_info(user)

        try:
            # –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∞–µ–º –±–∏–æ
            if info["bio"] not in [
                "BOT",
                "CHANNEL",
            ]:
                full_user_info = await self.client(GetFullUserRequest(user.id))

                if (
                    hasattr(full_user_info, "full_user")
                    and full_user_info.full_user  # type: ignore
                    and full_user_info.full_user.about  # type: ignore
                ):

                    bio = full_user_info.full_user.about  # type: ignore
                    info["bio"] = bio

        except Exception as e:
            if "InputPeerChannel" not in str(e):
                username = getattr(user, "username", f"ID:{user.id}")
                print(f"‚ö†Ô∏è  {username}: {str(e)}")

        return info

    async def list_users_in_group(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã –≤ CSV —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        result = await self.client(
            GetDialogsRequest(
                offset_date=None,
                offset_id=0,
                offset_peer=InputPeerEmpty(),
                limit=200,
                hash=0,
            )
        )

        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:")
        for idx, chat in enumerate(result.chats):  # type: ignore
            print(f"{idx}: {chat.title}")

        try:
            group_idx = int(input("\nüëÜ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: "))
            target_group = result.chats[group_idx]  # type: ignore
        except (ValueError, IndexError):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
            return

        print("üë• –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        participants = await self.client.get_participants(
            target_group, aggressive=True
        )

        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        mode_choice = input(
            "\nüöÄ –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n1. üî• –ë—ã—Å—Ç—Ä—ã–π (–±–µ–∑ API –∑–∞–ø—Ä–æ—Å–æ–≤)\n2. üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π (—Å –±–∏–æ)\nüëÜ –í—ã–±–æ—Ä: "
        )
        fast_mode = mode_choice == "1"

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å UUID
        prefix = "members"
        filename = self.generate_filename(prefix, target_group.title)

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ {filename}...")

        with open(filename, "w", encoding="UTF-8", newline="") as file:
            writer = csv.writer(file, delimiter=",")
            writer.writerow(
                [
                    "username",
                    "user_id",
                    "access_hash",
                    "name",
                    "group",
                    "group_id",
                    "bio",
                    "gaming_keywords",
                    "common_groups",
                ]
            )

            for i, user in enumerate(participants):
                if i % 50 == 0 or i == len(participants) - 1:
                    progress = (i + 1) / len(participants) * 100
                    print(
                        f"[{i+1}/{len(participants)}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {progress:.1f}%"
                    )

                username = getattr(user, "username", "")
                name = " ".join(
                    filter(
                        None,
                        [
                            getattr(user, "first_name", ""),
                            getattr(user, "last_name", ""),
                        ],
                    )
                )

                # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if fast_mode:
                    info = await self.get_user_fast_info(user)
                    await asyncio.sleep(0.1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                else:
                    info = await self.get_user_detailed_info(user)
                    await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è API

                writer.writerow(
                    [
                        username,
                        user.id,
                        getattr(user, "access_hash", ""),
                        name,
                        target_group.title,
                        target_group.id,
                        info["bio"],
                        info["gaming_keywords"],
                        info["common_groups"],
                    ]
                )

        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ {filename}")

    async def fetch_group_messages(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã"""
        result = await self.client(
            GetDialogsRequest(
                offset_date=None,
                offset_id=0,
                offset_peer=InputPeerEmpty(),
                limit=200,
                hash=0,
            )
        )

        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:")
        for idx, chat in enumerate(result.chats):  # type: ignore
            print(f"{idx}: {chat.title}")

        try:
            group_idx = int(input("\nüëÜ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: "))
            target_group = result.chats[group_idx]  # type: ignore
        except (ValueError, IndexError):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
            return

        print("\nüìÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–∞:")
        print("1. –î–Ω–∏")
        print("2. –ù–µ–¥–µ–ª–∏")
        print("3. –ú–µ—Å—è—Ü—ã")

        try:
            period_choice = int(input("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—Ä–∏–æ–¥–∞: "))
            period_map = {1: "days", 2: "weeks", 3: "months"}
            period_type = period_map.get(period_choice)

            if not period_type:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞")
                return

            quantity = int(input(f"üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {period_type}: "))
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
            return

        # –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        mode_choice = input(
            "\nüöÄ –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n1. üî• –ë—ã—Å—Ç—Ä—ã–π (—Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞)\n2. üîç –ü–æ–¥—Ä–æ–±–Ω—ã–π (—Å –±–∏–æ)\nüëÜ –í—ã–±–æ—Ä: "
        )
        fast_mode = mode_choice == "1"

        # –†–∞—Å—á–µ—Ç –¥–∞—Ç
        end_date = datetime.now(timezone.utc)
        if period_type == "days":
            start_date = end_date - timedelta(days=quantity)
        elif period_type == "weeks":
            start_date = end_date - timedelta(weeks=quantity)
        elif period_type == "months":
            start_date = end_date - timedelta(days=quantity * 30)
        else:
            return

        print(
            f'\nüì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å {start_date.strftime("%Y-%m-%d")} –ø–æ {end_date.strftime("%Y-%m-%d")}...'
        )

        messages = []
        try:
            async for message in self.client.iter_messages(target_group):
                if message.date < start_date:
                    break
                if message.date <= end_date:
                    messages.append(message)

                if len(messages) % 100 == 0:
                    print(f"üìù –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å UUID
        prefix = "messages"
        filename = self.generate_filename(prefix, target_group.title)

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {filename}...")

        users_cache = {}

        with open(filename, "w", encoding="UTF-8", newline="") as file:
            writer = csv.writer(file, delimiter=",")
            writer.writerow(
                [
                    "message_id",
                    "date",
                    "sender_id",
                    "sender_username",
                    "sender_name",
                    "message_text",
                    "group",
                    "group_id",
                    "sender_bio",
                    "message_gaming_keywords",
                    "sender_common_groups",
                ]
            )

            for i, message in enumerate(messages):
                if i % 25 == 0 or i == len(messages) - 1:
                    progress = (i + 1) / len(messages) * 100
                    print(
                        f"[{i+1}/{len(messages)}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {progress:.1f}%"
                    )

                # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
                sender_info = {
                    "username": "",
                    "id": "",
                    "name": "",
                    "bio": "",
                    "gaming_keywords": "",
                    "common_groups": "",
                }

                if message.sender:
                    sender_info["id"] = message.sender.id
                    sender_info["name"] = " ".join(
                        filter(
                            None,
                            [
                                getattr(message.sender, "first_name", ""),
                                getattr(message.sender, "last_name", ""),
                            ],
                        )
                    )

                    if (
                        hasattr(message.sender, "username")
                        and message.sender.username
                    ):
                        sender_info["username"] = message.sender.username

                    # –ö—ç—à–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
                    if sender_info["id"] not in users_cache:
                        if fast_mode:
                            user_info = await self.get_user_fast_info(
                                message.sender
                            )
                        else:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –¥–µ—Ç–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                            is_bot = getattr(message.sender, "bot", False)
                            is_channel = (
                                "Channel" in message.sender.__class__.__name__
                                if hasattr(message.sender, "__class__")
                                else False
                            )

                            if is_bot or is_channel:
                                user_info = await self.get_user_fast_info(
                                    message.sender
                                )
                            else:
                                user_info = await self.get_user_detailed_info(
                                    message.sender
                                )
                                await asyncio.sleep(
                                    0.2
                                )  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è API

                        users_cache[sender_info["id"]] = user_info
                    else:
                        user_info = users_cache[sender_info["id"]]

                    sender_info.update(
                        {
                            "bio": user_info["bio"],
                            "gaming_keywords": user_info["gaming_keywords"],
                            "common_groups": user_info["common_groups"],
                        }
                    )

                message_text = message.message or ""
                message_text = message_text.replace("\n", " ").replace(
                    "\r", " "
                )

                # –ü–æ–∏—Å–∫ gaming keywords —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_keywords = ""
                if message_text:
                    message_lower = message_text.lower()
                    found_message_keywords = [
                        kw for kw in GAMING_KEYWORDS if kw in message_lower
                    ]
                    if found_message_keywords:
                        message_keywords = ", ".join(found_message_keywords)

                writer.writerow(
                    [
                        message.id,
                        message.date.strftime("%Y-%m-%d %H:%M:%S"),
                        sender_info["id"],
                        sender_info["username"],
                        sender_info["name"],
                        message_text,
                        target_group.title,
                        target_group.id,
                        sender_info["bio"],
                        message_keywords,
                        sender_info["common_groups"],
                    ]
                )

        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {filename}")
        print(f"üìä –ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ {len(users_cache)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    async def add_users_to_group(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV –≤ –≥—Ä—É–ø–ø—É"""
        if len(sys.argv) < 2:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª CSV –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç")
            return

        input_file = sys.argv[1]
        users = []

        try:
            with open(input_file, encoding="UTF-8") as file:
                reader = csv.reader(file, delimiter=",", lineterminator="\n")
                next(reader)
                for row in reader:
                    if len(row) < 3:
                        continue
                    users.append(
                        {
                            "username": row[0],
                            "id": int(row[1]) if row[1] else 0,
                            "access_hash": int(row[2]) if row[2] else 0,
                        }
                    )
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        result = await self.client(
            GetDialogsRequest(
                offset_date=None,
                offset_id=0,
                offset_peer=InputPeerEmpty(),
                limit=200,
                hash=0,
            )
        )

        groups = [chat for chat in result.chats if getattr(chat, "megagroup", False)]  # type: ignore

        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:")
        for idx, group in enumerate(groups):
            print(f"{idx}: {group.title}")

        try:
            group_idx = int(input("\nüëÜ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: "))
            target_group = groups[group_idx]
            target_channel = InputChannel(
                target_group.id, target_group.access_hash
            )
        except (ValueError, IndexError):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
            return

        try:
            add_method = int(
                input("\nüîß –ú–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (1-–ø–æ username, 2-–ø–æ ID): ")
            )
        except ValueError:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞")
            return

        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        for i, user in enumerate(users):
            try:
                print(f'[{i+1}/{len(users)}] –î–æ–±–∞–≤–ª—è–µ–º {user["username"]}')

                if add_method == 1:
                    user_to_add = await self.client.get_input_entity(
                        user["username"]
                    )
                elif add_method == 2:
                    user_to_add = InputUser(user["id"], user["access_hash"])
                else:
                    break

                await self.client(InviteToChannelRequest(target_channel, [user_to_add]))  # type: ignore
                print("‚è±Ô∏è  –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(60)

            except PeerFloodError:
                print("üö´ –û—à–∏–±–∫–∞ —Ñ–ª—É–¥–∞. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                break
            except UserPrivacyRestrictedError:
                print("üîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            except FloodWaitError as e:
                print(f"‚è≥ –§–ª—É–¥ –ª–∏–º–∏—Ç. –û–∂–∏–¥–∞–Ω–∏–µ {e.seconds} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(e.seconds)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    def display_csv(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ CSV —Ñ–∞–π–ª–∞"""
        if len(sys.argv) < 2:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ data
            self.ensure_data_folder()
            data_files = list(self.data_folder.glob("*.csv"))
            if data_files:
                print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ data:")
                for i, file in enumerate(data_files):
                    print(f"{i+1}. {file.name}")

                try:
                    choice = int(input("\nüëÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª (–Ω–æ–º–µ—Ä): ")) - 1
                    if 0 <= choice < len(data_files):
                        filename = str(data_files[choice])
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞")
                        return
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                    return
            else:
                print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ data")
                return
        else:
            filename = sys.argv[1]
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–µ–º –≤ –ø–∞–ø–∫–µ data
            if not Path(filename).exists():
                data_file = self.data_folder / filename
                if data_file.exists():
                    filename = str(data_file)

        try:
            with open(filename, encoding="UTF-8") as file:
                reader = csv.reader(file, delimiter=",")
                print(f"\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: {Path(filename).name}")
                print("=" * 50)
                for i, row in enumerate(reader):
                    print(f"[{i+1}] {row}")
                    if i > 20:
                        print("... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫)")
                        break
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

    async def run(self):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üöÄ Fast Telegram Scraper - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        print("=" * 55)

        await self.connect()

        choice = input(
            "\nüìã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
            "1. üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã\n"
            "2. ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø—É\n"
            "3. üìÑ –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ CSV\n"
            "4. üí¨ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É\n"
            "\nüëÜ –í–∞—à –≤—ã–±–æ—Ä: "
        )

        try:
            choice = int(choice)
            if choice == 1:
                await self.list_users_in_group()
            elif choice == 2:
                await self.add_users_to_group()
            elif choice == 3:
                self.display_csv()
            elif choice == 4:
                await self.fetch_group_messages()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        except KeyboardInterrupt:
            print("\n\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            print("\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Telegram...")
            self.client.disconnect()


async def main():
    scraper = FastTelegramScraper()
    await scraper.run()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
